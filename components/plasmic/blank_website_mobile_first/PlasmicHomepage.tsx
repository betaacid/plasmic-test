/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i9knz7EXdrcBWswQTuKKjX
// Component: t6bbWH5XZ4fm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 7v6YGoE2Zo0o/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Modal from "../../Modal"; // plasmic-import: 5SZcaRjHDDZd/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import TextField from "../../TextField"; // plasmic-import: rdfZLaxRGh3N/component

import { useScreenVariants as useScreenVariantsajVfn3Ya69H5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AJVfn3Ya69h5/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: i9knz7EXdrcBWswQTuKKjX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: t6bbWH5XZ4fm/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: k4ujBvekGioO/icon
import MenuSvgIcon from "./icons/PlasmicIcon__MenuSvg"; // plasmic-import: m6be-c-hP_JG/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: H5Yxuv6_n5vq/icon
import EmailIconSvgIcon from "./icons/PlasmicIcon__EmailIconSvg"; // plasmic-import: zIXVq3DAAel6/icon
import CrownHaloIcon from "./icons/PlasmicIcon__CrownHalo"; // plasmic-import: QESqRHbH-Tr7/icon
import LineBreakIcon from "./icons/PlasmicIcon__LineBreak"; // plasmic-import: OaJD_NBb6Nrq/icon
import InstagramLogoIcon from "./icons/PlasmicIcon__InstagramLogo"; // plasmic-import: LCLxgt2Kqs7i/icon
import SpeechBubbleIcon from "./icons/PlasmicIcon__SpeechBubble"; // plasmic-import: s311iITGUFs6/icon
import ContactEmailIcon from "./icons/PlasmicIcon__ContactEmail"; // plasmic-import: u1EK1ushqS6H/icon
import CloseIconIcon from "./icons/PlasmicIcon__CloseIcon"; // plasmic-import: NxIUoog3Afja/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navSection?: Flex__<"section">;
  headerSection?: Flex__<"section">;
  h1?: Flex__<"h1">;
  aboutMeSection?: Flex__<"section">;
  portfolioSection?: Flex__<"section">;
  h2?: Flex__<"h2">;
  libertineBlendsProject?: Flex__<"div">;
  projectListItems?: Flex__<"li">;
  libertineCocktailBarProject?: Flex__<"div">;
  tiberiProject?: Flex__<"div">;
  whiskeriaProject?: Flex__<"div">;
  twoSchmukcs?: Flex__<"div">;
  creativeColabsProject?: Flex__<"div">;
  servicesSection?: Flex__<"section">;
  service1?: Flex__<"div">;
  rtdProductDevelopment?: Flex__<"div">;
  service2?: Flex__<"div">;
  rtdProductDevelopment2?: Flex__<"div">;
  service3?: Flex__<"div">;
  rtdProductDevelopment3?: Flex__<"div">;
  service4?: Flex__<"div">;
  rtdProductDevelopment4?: Flex__<"div">;
  photosSection?: Flex__<"section">;
  recognitionSection?: Flex__<"section">;
  columns?: Flex__<"div">;
  socialsSection?: Flex__<"section">;
  instagramPosts?: Flex__<"div">;
  post1?: Flex__<"div">;
  post2?: Flex__<"div">;
  post3?: Flex__<"div">;
  post4?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  testimonialsSection?: Flex__<"section">;
  _?: Flex__<"div">;
  footer?: Flex__<"section">;
  h6?: Flex__<"h6">;
  menuModal?: Flex__<typeof Modal>;
  links?: Flex__<"div">;
  formModal?: Flex__<typeof Modal>;
  reachOutAndLetsTalk?: Flex__<"div">;
  contactForm?: Flex__<typeof FormWrapper>;
  name?: Flex__<typeof FormItemWrapper>;
  textField?: Flex__<typeof TextField>;
  email?: Flex__<typeof FormItemWrapper>;
  emailInput?: Flex__<typeof TextField>;
  phone?: Flex__<typeof FormItemWrapper>;
  phoneField?: Flex__<typeof TextField>;
  message?: Flex__<typeof FormItemWrapper>;
  textField2?: Flex__<typeof TextField>;
  sendMessage?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "formModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "contactForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "contactForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "contactForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "contactForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "phoneField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textField2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsajVfn3Ya69H5()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"navSection"}
            data-plasmic-override={overrides.navSection}
            className={classNames(projectcss.all, sty.navSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__elpz9)}>
              <Button
                className={classNames("__wab_instance", sty.button__kR0U)}
                label={
                  <React.Fragment>
                    <MenuSvgIcon
                      className={classNames(projectcss.all, sty.svg__sj8Mc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0VLey
                      )}
                    >
                      {"Menu"}
                    </div>
                  </React.Fragment>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateMenuModalIsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["menuModal", "isOpen"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMenuModalIsOpen"] != null &&
                    typeof $steps["updateMenuModalIsOpen"] === "object" &&
                    typeof $steps["updateMenuModalIsOpen"].then === "function"
                  ) {
                    $steps["updateMenuModalIsOpen"] = await $steps[
                      "updateMenuModalIsOpen"
                    ];
                  }
                }}
                type={"icon"}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mn83Y)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? "202px"
                    : "auto"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website_mobile_first/images/logoPng.png",
                  fullWidth: 152,
                  fullHeight: 12,
                  aspectRatio: undefined
                }}
              />

              <Button
                className={classNames("__wab_instance", sty.button__fZIuf)}
                color={"neutral"}
                flatSide={[]}
                iconStart={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? undefined
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                }
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a8Syd
                    )}
                  >
                    {"Let's work together"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateFormModalIsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["formModal", "isOpen"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFormModalIsOpen"] != null &&
                    typeof $steps["updateFormModalIsOpen"] === "object" &&
                    typeof $steps["updateFormModalIsOpen"].then === "function"
                  ) {
                    $steps["updateFormModalIsOpen"] = await $steps[
                      "updateFormModalIsOpen"
                    ];
                  }
                }}
                start={
                  <EmailIconSvgIcon
                    className={classNames(projectcss.all, sty.svg__gieMo)}
                    role={"img"}
                  />
                }
                type={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? undefined
                    : "icon"
                }
              />
            </div>
          </section>
          <section
            data-plasmic-name={"headerSection"}
            data-plasmic-override={overrides.headerSection}
            className={classNames(projectcss.all, sty.headerSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wrbg8)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__okmBy)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? "152px"
                    : "82px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website_mobile_first/images/cocktailOnTable.png",
                  fullWidth: 304,
                  fullHeight: 214,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r6Ms5
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__s8CyR
                      )}
                    >
                      {"COCKTAILS"}
                    </h3>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__agGoN)}>
              <div className={classNames(projectcss.all, sty.freeBox__ewVxr)}>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__yB37N
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"KING"}
                      </h1>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </h3>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tpE3K)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2YIc
                    )}
                  >
                    {"Global Beverage Consultant"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zm90M
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Expert in "}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link___5Zlyj
                          )}
                          component={Link}
                          href={"#services"}
                          platform={"nextjs"}
                        >
                          {"Ready-to-Drink Cocktails"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{", "}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__sARtq
                          )}
                          component={Link}
                          href={"#services"}
                          platform={"nextjs"}
                        >
                          {"Bar Program Development"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{" & "}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link___2Cn6U
                          )}
                          component={Link}
                          href={"#services"}
                          platform={"nextjs"}
                        >
                          {"Menu Curation"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </Stack__>
                <Button
                  className={classNames("__wab_instance", sty.button__w0Xp)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dGq2T
                      )}
                    >
                      {"Let\u2019s work together"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateFormModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["formModal", "isOpen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFormModalIsOpen"] != null &&
                      typeof $steps["updateFormModalIsOpen"] === "object" &&
                      typeof $steps["updateFormModalIsOpen"].then === "function"
                    ) {
                      $steps["updateFormModalIsOpen"] = await $steps[
                        "updateFormModalIsOpen"
                      ];
                    }
                  }}
                />
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__nIRsV)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? "309px"
                    : "239px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website_mobile_first/images/cocktailWithLemon.png",
                  fullWidth: 478,
                  fullHeight: 768,
                  aspectRatio: undefined
                }}
              />
            </div>
          </section>
          <section
            data-plasmic-name={"aboutMeSection"}
            data-plasmic-override={overrides.aboutMeSection}
            className={classNames(projectcss.all, sty.aboutMeSection)}
            id={"about-me"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ekNw6)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___3Ol6L)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "tablet")
                    ? "40vw"
                    : "none"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website_mobile_first/images/profilePic.png",
                  fullWidth: 1110,
                  fullHeight: 1466,
                  aspectRatio: undefined
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox___6VpK3)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pAg8Q)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1ApTq
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4___3Hg24
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-vKYvxi3wkDsp)" }}
                            >
                              {"ABOUT ME."}
                            </span>
                          </React.Fragment>
                        </h4>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <CrownHaloIcon
                    className={classNames(projectcss.all, sty.svg__nxJdj)}
                    role={"img"}
                  />
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fY8QO
                  )}
                >
                  {
                    "I'm an award-winning beverage consultant working globally to help brands, bars, and product developers bring their visions to life. My background spans cocktail development, production consulting, staff training, and menu design."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8ADKo
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul___4Eiz8
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__z2Cdn
                          )}
                        >
                          {"Ingredient-driven"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__yxGVr
                          )}
                        >
                          {"Technically precise\n"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__cdzBj
                          )}
                        >
                          {"Thoughtfully creative"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__d86Ak
                          )}
                        >
                          {"Comforting yet sophisticated"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___7DTs6
                          )}
                        >
                          {
                            "Always clean and minimal in design and presentation"
                          }
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rj3O
                  )}
                >
                  {
                    "I've collaborated with companies ranging from boutique producers to large-scale manufacturers, always tailoring solutions that balance form, function, and flavor."
                  }
                </div>
              </div>
            </Stack__>
          </section>
          <section
            data-plasmic-name={"portfolioSection"}
            data-plasmic-override={overrides.portfolioSection}
            className={classNames(projectcss.all, sty.portfolioSection)}
            id={"portfolio"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wfw4L
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___2ODj
                    )}
                  >
                    {"PORTFOLIO / RECENT"}
                  </h5>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gzkOn
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    {"PROJECTS"}
                  </h2>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zcNq5)}>
              <div
                data-plasmic-name={"libertineBlendsProject"}
                data-plasmic-override={overrides.libertineBlendsProject}
                className={classNames(
                  projectcss.all,
                  sty.libertineBlendsProject
                )}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nWh6E)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? "513px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/stackedCans.png",
                    fullWidth: 632,
                    fullHeight: 388,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__kBwyl)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cmr7P
                    )}
                  >
                    {"RTD Cocktail Development"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lSzin
                  )}
                >
                  {"Libertine Blends"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__flAd
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__rOGr9
                        )}
                      >
                        <li
                          data-plasmic-name={"projectListItems"}
                          data-plasmic-override={overrides.projectListItems}
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.projectListItems
                          )}
                        >
                          {"Concept Creation"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__qn6K1
                          )}
                        >
                          {"Recipe Creation"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__qYqzs
                          )}
                        >
                          {"Recipe Scaling"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__sFk6
                          )}
                        >
                          {"Production"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"libertineCocktailBarProject"}
                data-plasmic-override={overrides.libertineCocktailBarProject}
                className={classNames(
                  projectcss.all,
                  sty.libertineCocktailBarProject
                )}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__cd0Z0)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/barAndTables.png",
                    fullWidth: 632,
                    fullHeight: 388,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8AWe)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xXDx0
                    )}
                  >
                    {"Bar Programs"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j7X7F
                    )}
                  >
                    {"RTD Cocktail Development"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8ShBo
                  )}
                >
                  {"Libertine Cocktail Bar, Barcelona"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jwi92
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__kqpDx
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__rvxFh
                          )}
                        >
                          {"Bar concept creation"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__xh1T9
                          )}
                        >
                          {"Menu creation & curation"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__onuck
                          )}
                        >
                          {
                            "Draft, bottled, and canned cocktail program creation"
                          }
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___59RLr
                          )}
                        >
                          {"Team training"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"tiberiProject"}
                data-plasmic-override={overrides.tiberiProject}
                className={classNames(projectcss.all, sty.tiberiProject)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__gsWX)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/whiteBar.png",
                    fullWidth: 632,
                    fullHeight: 388,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ief9L)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__saGc1
                    )}
                  >
                    {"Bar Programs"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4VU0T
                    )}
                  >
                    {"RTD Cocktail Development"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sgFWe
                  )}
                >
                  {"Tiberi, Barcelona"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lPlHq
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__ghaym
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__mgloE
                          )}
                        >
                          {"Draft cocktail program"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__zXhEw
                          )}
                        >
                          {"Sourcing of materials"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__t1KRh
                          )}
                        >
                          {"Installation oversight"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"whiskeriaProject"}
                data-plasmic-override={overrides.whiskeriaProject}
                className={classNames(projectcss.all, sty.whiskeriaProject)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__qCRw0)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/darkBar.png",
                    fullWidth: 634,
                    fullHeight: 388,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6RlZy)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xy0XH
                    )}
                  >
                    {"Bar Programs"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mtSKl
                  )}
                >
                  {"La Whiskeria, Barcelona"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tdQf
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__iJcOb
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__mcRfm
                          )}
                        >
                          {"Cocktail menu development & curation"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__eBdc
                          )}
                        >
                          {"Standard operating procedure"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___1Iwwe
                          )}
                        >
                          {"Team training"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"twoSchmukcs"}
                data-plasmic-override={overrides.twoSchmukcs}
                className={classNames(projectcss.all, sty.twoSchmukcs)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__oj81H)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/stoneBar.png",
                    fullWidth: 632,
                    fullHeight: 388,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qdgKm)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dwEa
                    )}
                  >
                    {"Bar Programs"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tNpZ1
                  )}
                >
                  {"Two Schmucks, Barcelona"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Re97
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul__mqYv
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__tzOMj
                          )}
                        >
                          {"Draft cocktail program"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___76GMo
                          )}
                        >
                          {"Standard operating procedure"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__a67Tl
                          )}
                        >
                          {"Team training"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"creativeColabsProject"}
                data-plasmic-override={overrides.creativeColabsProject}
                className={classNames(
                  projectcss.all,
                  sty.creativeColabsProject
                )}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__eCpI0)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/unstackedCans.png",
                    fullWidth: 632,
                    fullHeight: 388,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fbXj3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2C8BR
                    )}
                  >
                    {"RTD Cocktail Development"}
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ot37W
                  )}
                >
                  {"Creative Collaborations"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0GEbh
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <ul
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul___3Hz84
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__ftRwZ
                          )}
                        >
                          {"Hotel Casa Bonay"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__aBeL1
                          )}
                        >
                          {"Asia's 50 Best Bars"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kv4X
                          )}
                        >
                          {"Wozere Studio"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__xEj6W
                          )}
                        >
                          {"Michter's Whiskey"}
                        </li>
                      </ul>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"servicesSection"}
            data-plasmic-override={overrides.servicesSection}
            className={classNames(projectcss.all, sty.servicesSection)}
            id={"services"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mj14Y
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___9FxNk
                    )}
                  >
                    {"SERVICES"}
                  </h5>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xPeC3)}>
              <div
                data-plasmic-name={"service1"}
                data-plasmic-override={overrides.service1}
                className={classNames(projectcss.all, sty.service1)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__h7OxU)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? "329px"
                      : "271px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/rocksGlass.png",
                    fullWidth: 658,
                    fullHeight: 466,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dB1Oa)}
                >
                  <div
                    data-plasmic-name={"rtdProductDevelopment"}
                    data-plasmic-override={overrides.rtdProductDevelopment}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.rtdProductDevelopment
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5___8Iewq
                          )}
                        >
                          {"RTD PRODUCT DEVELOPMENT"}
                        </h5>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g7CNt
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__fpw3Y
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__eeX4
                            )}
                          >
                            {"Concept ideation to full formulation"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__wb3Ss
                            )}
                          >
                            {
                              "Ingredient sourcing, flavor development, and recipe creation"
                            }
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__u0WTy
                            )}
                          >
                            {
                              "Scaling up from test kitchen to production facility"
                            }
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <LineBreakIcon
                    className={classNames(projectcss.all, sty.svg__j2GYc)}
                    role={"img"}
                  />
                </Stack__>
              </div>
              <div
                data-plasmic-name={"service2"}
                data-plasmic-override={overrides.service2}
                className={classNames(projectcss.all, sty.service2)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mCU7)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? "329px"
                      : "283px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/barsAndTablesRound.png",
                    fullWidth: 657,
                    fullHeight: 466,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hn71T)}
                >
                  <div
                    data-plasmic-name={"rtdProductDevelopment2"}
                    data-plasmic-override={overrides.rtdProductDevelopment2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.rtdProductDevelopment2
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5___7KDF
                          )}
                        >
                          {"BAR PROGRAM CONSULTING"}
                        </h5>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j7OBc
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__d8Vjv
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__dqOu6
                            )}
                          >
                            {"Concept creation"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__slm8A
                            )}
                          >
                            {"Menu development and costing"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__sveei
                            )}
                          >
                            {"Signature drinks"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li___3DcUx
                            )}
                          >
                            {"Draft, bottled, and canned cocktail solutions"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__f5Hsg
                            )}
                          >
                            {"Staff training"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__nkhOj
                            )}
                          >
                            {"SOP creation and operational consulting"}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <LineBreakIcon
                    className={classNames(projectcss.all, sty.svg__lmffA)}
                    role={"img"}
                  />
                </Stack__>
              </div>
              <div
                data-plasmic-name={"service3"}
                data-plasmic-override={overrides.service3}
                className={classNames(projectcss.all, sty.service3)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__exN01)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? "329px"
                      : "271px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/cocktailWithLeaves.png",
                    fullWidth: 658,
                    fullHeight: 466,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4Usfl)}
                >
                  <div
                    data-plasmic-name={"rtdProductDevelopment3"}
                    data-plasmic-override={overrides.rtdProductDevelopment3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.rtdProductDevelopment3
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__unVvz
                          )}
                        >
                          {"MENU CURATION"}
                        </h5>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rmjsM
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__v107B
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__pyJsk
                            )}
                          >
                            {"Seasonal cocktail menus"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__z3Y5T
                            )}
                          >
                            {"Signature drinks"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__gv5K3
                            )}
                          >
                            {"Branded or collaboration menus"}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <LineBreakIcon
                    className={classNames(projectcss.all, sty.svg__tnB4I)}
                    role={"img"}
                  />
                </Stack__>
              </div>
              <div
                data-plasmic-name={"service4"}
                data-plasmic-override={overrides.service4}
                className={classNames(projectcss.all, sty.service4)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__uFqoz)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? "329px"
                      : "271px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/bottles.png",
                    fullWidth: 658,
                    fullHeight: 466,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wBuCn)}
                >
                  <div
                    data-plasmic-name={"rtdProductDevelopment4"}
                    data-plasmic-override={overrides.rtdProductDevelopment4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.rtdProductDevelopment4
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tablet") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__zC0Z
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "tablet")
                              ? "CREATIVE COLLABORATIONS"
                              : "CREATIVE COLLABORATIONS"}
                          </h5>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__zC0Z
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "tablet")
                              ? "CREATIVE COLLABORATIONS"
                              : "CREATIVE COLLABORATIONS"}
                          </h5>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eqc3E
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <ul
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul__eq7JU
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__qYn8B
                            )}
                          >
                            {"Brand activations and pop-ups\n"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li___2KhkC
                            )}
                          >
                            {"Customized cocktail creation"}
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__ai435
                            )}
                          >
                            {"Private or immersive cocktail experiences"}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"photosSection"}
            data-plasmic-override={overrides.photosSection}
            className={classNames(projectcss.all, sty.photosSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qIdN)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___8IwMf)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "839px"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "564px"
                    : "409px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "676px"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "428px"
                    : "310px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website_mobile_first/images/bowtie.png",
                  fullWidth: 598,
                  fullHeight: 818,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__s39VH)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "576px"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "392px"
                    : "283px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "406px"
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? "276px"
                    : "199px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/blank_website_mobile_first/images/cocktailWithGrape.png",
                  fullWidth: 399,
                  fullHeight: 566,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
          </section>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__huMB)}
            displayHeight={
              hasVariant(globalVariants, "screen", "tablet") ? "217px" : "126px"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blank_website_mobile_first/images/pressBanner.png",
              fullWidth: 1536,
              fullHeight: 435,
              aspectRatio: undefined
            }}
          />

          <section
            data-plasmic-name={"recognitionSection"}
            data-plasmic-override={overrides.recognitionSection}
            className={classNames(projectcss.all, sty.recognitionSection)}
            id={"press"}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__ejBjz)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__e2RaM)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"56px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/sfCompetitionAward.png",
                    fullWidth: 112,
                    fullHeight: 112,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oKmD
                  )}
                >
                  {"San Francisco \nInternational Wine & \nSpirits Competition"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xXeF)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/sfCompetitionMedals.png",
                    fullWidth: 590,
                    fullHeight: 302,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__uw5Ah)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__a7XPn)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"122px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/spiritAndBusinessLog0.png",
                    fullWidth: 244,
                    fullHeight: 92,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9SQy4
                  )}
                >
                  {"The Spirits Business - Global Spirits Masters Competition"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___8MaXh)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/spiritAndBusinessMedals.svg",
                    fullWidth: 295,
                    fullHeight: 77,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__nJiFo)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__h5L4N)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"240px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/_50BestDiscoveryLogo.png",
                    fullWidth: 506,
                    fullHeight: 92,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tJ8F2
                  )}
                >
                  {"Awarded Bar Programs"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zywxc)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/barAwards.png",
                    fullWidth: 566,
                    fullHeight: 550,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
          </section>
          <section
            data-plasmic-name={"socialsSection"}
            data-plasmic-override={overrides.socialsSection}
            className={classNames(projectcss.all, sty.socialsSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7BtnU)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4OiPg
                )}
              >
                {"FOLLOW ME"}
              </div>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__gZOrv
                )}
                component={Link}
                href={"https://www.instagram.com/cocktails__king/"}
                platform={"nextjs"}
                target={"_blank"}
              >
                <InstagramLogoIcon
                  className={classNames(projectcss.all, sty.svg__gqwjj)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vTv0E
                  )}
                >
                  {"@cocktails__king"}
                </div>
              </PlasmicLink__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"instagramPosts"}
              data-plasmic-override={overrides.instagramPosts}
              hasGap={true}
              className={classNames(projectcss.all, sty.instagramPosts)}
            >
              <div
                data-plasmic-name={"post1"}
                data-plasmic-override={overrides.post1}
                className={classNames(projectcss.all, sty.post1)}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__jjVkC)}
                  code={
                    '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/C4hvWv1sKAD/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/C4hvWv1sKAD/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/C4hvWv1sKAD/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                  }
                />
              </div>
              <div
                data-plasmic-name={"post2"}
                data-plasmic-override={overrides.post2}
                className={classNames(projectcss.all, sty.post2)}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__tthwk)}
                  code={
                    '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/C11RKzrstAu/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/C11RKzrstAu/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/C11RKzrstAu/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                  }
                />
              </div>
              <div
                data-plasmic-name={"post3"}
                data-plasmic-override={overrides.post3}
                className={classNames(projectcss.all, sty.post3)}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__k8ZV)}
                  code={
                    '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/Cz9AzU0rsHR/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/Cz9AzU0rsHR/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/Cz9AzU0rsHR/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                  }
                />
              </div>
              <div
                data-plasmic-name={"post4"}
                data-plasmic-override={overrides.post4}
                className={classNames(projectcss.all, sty.post4)}
              >
                <Embed
                  className={classNames(
                    "__wab_instance",
                    sty.embedHtml___2WTKa
                  )}
                  code={
                    '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/CzDkDIOsApk/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/CzDkDIOsApk/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/CzDkDIOsApk/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                  }
                />
              </div>
            </Stack__>
            {(() => {
              const child$Props = {
                arrows: hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : false,
                autoplay: hasVariant(globalVariants, "screen", "tablet")
                  ? false
                  : false,
                autoplaySpeed: 0,
                beforeChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "currentSlide",
                    ["sliderCarousel", "currentSlide"],
                    SliderWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                centerMode: hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : false,
                className: classNames("__wab_instance", sty.sliderCarousel),
                cssEase: "linear",
                infinite: hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : false,
                initialSlide: generateStateValueProp($state, [
                  "sliderCarousel",
                  "currentSlide"
                ]),
                pauseOnFocus: hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : undefined,
                pauseOnHover: false,
                ref: ref => {
                  $refs["sliderCarousel"] = ref;
                },
                rows: hasVariant(globalVariants, "screen", "tablet") ? 1 : 4,
                sliderScopeClassName: sty["sliderCarousel__slider"],
                slidesPerRow: hasVariant(globalVariants, "screen", "desktop")
                  ? 3
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? 2
                  : 1,
                speed: hasVariant(globalVariants, "screen", "tablet")
                  ? 500
                  : 5000,
                swipe: hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : false,
                swipeToSlide: hasVariant(globalVariants, "screen", "tablet")
                  ? true
                  : undefined,
                vertical: hasVariant(globalVariants, "screen", "tablet")
                  ? false
                  : false
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "currentSlide",
                    plasmicStateName: "sliderCarousel.currentSlide"
                  }
                ],
                [],
                SliderWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <SliderWrapper
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hlNxQ)}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__pRJiN
                      )}
                      code={
                        '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/C4hvWv1sKAD/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/C4hvWv1sKAD/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/C4hvWv1sKAD/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sEnJh)}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml___3XnSs
                      )}
                      code={
                        '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/C11RKzrstAu/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/C11RKzrstAu/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/C11RKzrstAu/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__r49Wr)}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__rO0M4
                      )}
                      code={
                        '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/Cz9AzU0rsHR/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/Cz9AzU0rsHR/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/Cz9AzU0rsHR/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sei4J)}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml___8QkCn
                      )}
                      code={
                        '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/p/CzDkDIOsApk/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/p/CzDkDIOsApk/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div></div></a><p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;"><a href="https://www.instagram.com/p/CzDkDIOsApk/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;" target="_blank">A post shared by Eric Stephenson (@cocktails__king)</a></p></div></blockquote>\n<script async src="//www.instagram.com/embed.js"></script>'
                      }
                    />
                  </div>
                </SliderWrapper>
              );
            })()}
          </section>
          <section
            data-plasmic-name={"testimonialsSection"}
            data-plasmic-override={overrides.testimonialsSection}
            className={classNames(projectcss.all, sty.testimonialsSection)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bjSp3
              )}
            >
              {"\u201c"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pfRk)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___67SKu
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__fKuWl
                      )}
                    >
                      {"TESTIMONIALS"}
                    </h4>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <SpeechBubbleIcon
                className={classNames(projectcss.all, sty.svg__hlwiR)}
                role={"img"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__rWKmW)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wvh3C)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0VSh
                  )}
                >
                  {
                    "Stephenson\u2019s passion for experimentation is evident in both his work ethic and the product; he spends hours poring over cookbooks, flavor bibles and classic cocktail recipes before tasting, balancing and perfecting new cocktails with his team."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__osRz
                  )}
                >
                  {"LuxuryInsider.Co"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jzbSc)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dcLgb
                  )}
                >
                  {
                    "Libertine Blends is redefining the ready-to-drink (RTD) cocktail market, bringing sophistication and quality from behind the bar to a can in your hand."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dEbb
                  )}
                >
                  {"Travel & Lust"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__t05E1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2Gz5Y
                  )}
                >
                  {
                    "Globetrotting American bar consultant Eric Stephenson understands the way Barcelona\u2019s cosmopolitan cocktail community wants to drink."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4QWcm
                  )}
                >
                  {"World's 50 Best Bars"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jkr16)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bQ4Be
                  )}
                >
                  {
                    "Libertine Blends revolutionizes cocktails with stylish and flavorful ready-to-drink cocktails that combine sophistication, sustainability and taste to be enjoyed anywhere."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fveHv
                  )}
                >
                  {"BCN Fashion"}
                </div>
                <div
                  data-plasmic-name={"_"}
                  data-plasmic-override={overrides._}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._
                  )}
                >
                  {"\u201d"}
                </div>
              </Stack__>
            </div>
          </section>
          <section
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
            id={"contact"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rSInS)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___3Csml)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yZqsf
                  )}
                >
                  {"Let's work together"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l4TR0
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h6
                        data-plasmic-name={"h6"}
                        data-plasmic-override={overrides.h6}
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "For project inquiries, collaboration proposals, or press\u2014 "
                            }
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-5Fd7Ld29XUJq)" }}
                          >
                            {"reach out and lets talk"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-18leZVsOXWhv)" }}
                          >
                            {"."}
                          </span>
                        </React.Fragment>
                      </h6>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__erSYd)}>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__e4CU7
                    )}
                    component={Link}
                    href={"https://www.instagram.com/cocktails__king/"}
                    platform={"nextjs"}
                  >
                    <InstagramLogoIcon
                      className={classNames(projectcss.all, sty.svg__o9Crh)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kaooQ
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-00hQVsY5huLW)" }}
                        >
                          {"@cocktails__king"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___7YtFz
                    )}
                    component={Link}
                    href={"mailto:hello@cocktailsking.com"}
                    platform={"nextjs"}
                  >
                    <ContactEmailIcon
                      className={classNames(projectcss.all, sty.svg__xwy4K)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3FxJj
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-00hQVsY5huLW)" }}
                        >
                          {"hello@cocktailsking.com"}
                        </span>
                      </React.Fragment>
                    </div>
                  </Stack__>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eg7L4)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__adh4O)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? "151px"
                      : "auto"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/blank_website_mobile_first/images/logo22.png",
                    fullWidth: 127,
                    fullHeight: 10,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5LBSc
                  )}
                >
                  {"2025 Copyright"}
                </div>
              </div>
            </Stack__>
          </section>
          <Modal
            data-plasmic-name={"menuModal"}
            data-plasmic-override={overrides.menuModal}
            className={classNames("__wab_instance", sty.menuModal)}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wWlFd)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button___4PzFs)}
                  label={
                    <React.Fragment>
                      <CloseIconIcon
                        className={classNames(projectcss.all, sty.svg__cPhon)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z3Lpw
                        )}
                      >
                        {"Menu"}
                      </div>
                    </React.Fragment>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMenuModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["menuModal", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMenuModalIsOpen"] != null &&
                      typeof $steps["updateMenuModalIsOpen"] === "object" &&
                      typeof $steps["updateMenuModalIsOpen"].then === "function"
                    ) {
                      $steps["updateMenuModalIsOpen"] = await $steps[
                        "updateMenuModalIsOpen"
                      ];
                    }
                  }}
                  type={"icon"}
                />

                <Stack__
                  as={"div"}
                  data-plasmic-name={"links"}
                  data-plasmic-override={overrides.links}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.links)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__gFi1F
                    )}
                    component={Link}
                    href={`/`}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMenuModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["menuModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMenuModalIsOpen"] != null &&
                        typeof $steps["updateMenuModalIsOpen"] === "object" &&
                        typeof $steps["updateMenuModalIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateMenuModalIsOpen"] = await $steps[
                          "updateMenuModalIsOpen"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3___4M7DZ
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-OpsAqN-5bUxj)" }}
                            >
                              {"HOME"}
                            </span>
                          </React.Fragment>
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___4SJqw
                    )}
                    component={Link}
                    href={"#about-me"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMenuModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["menuModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMenuModalIsOpen"] != null &&
                        typeof $steps["updateMenuModalIsOpen"] === "object" &&
                        typeof $steps["updateMenuModalIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateMenuModalIsOpen"] = await $steps[
                          "updateMenuModalIsOpen"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__yFzxG
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-OpsAqN-5bUxj)" }}
                            >
                              {"ABOUT ME"}
                            </span>
                          </React.Fragment>
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___82ACw
                    )}
                    component={Link}
                    href={"#portfolio"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMenuModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["menuModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMenuModalIsOpen"] != null &&
                        typeof $steps["updateMenuModalIsOpen"] === "object" &&
                        typeof $steps["updateMenuModalIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateMenuModalIsOpen"] = await $steps[
                          "updateMenuModalIsOpen"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__s6A8D
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-OpsAqN-5bUxj)" }}
                            >
                              {"PORTFOLIO"}
                            </span>
                          </React.Fragment>
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__oBvNi
                    )}
                    component={Link}
                    href={"#services"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMenuModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["menuModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMenuModalIsOpen"] != null &&
                        typeof $steps["updateMenuModalIsOpen"] === "object" &&
                        typeof $steps["updateMenuModalIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateMenuModalIsOpen"] = await $steps[
                          "updateMenuModalIsOpen"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__wpji
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-OpsAqN-5bUxj)" }}
                            >
                              {"SERVICES"}
                            </span>
                          </React.Fragment>
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ryfvV
                    )}
                    component={Link}
                    href={"#press"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMenuModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["menuModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMenuModalIsOpen"] != null &&
                        typeof $steps["updateMenuModalIsOpen"] === "object" &&
                        typeof $steps["updateMenuModalIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateMenuModalIsOpen"] = await $steps[
                          "updateMenuModalIsOpen"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__g9Rrx
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-OpsAqN-5bUxj)" }}
                            >
                              {"PRESS"}
                            </span>
                          </React.Fragment>
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__sZXd
                    )}
                    component={Link}
                    href={"#contact"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMenuModalIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["menuModal", "isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMenuModalIsOpen"] != null &&
                        typeof $steps["updateMenuModalIsOpen"] === "object" &&
                        typeof $steps["updateMenuModalIsOpen"].then ===
                          "function"
                      ) {
                        $steps["updateMenuModalIsOpen"] = await $steps[
                          "updateMenuModalIsOpen"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__pTvn
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-OpsAqN-5bUxj)" }}
                            >
                              {"CONTACT"}
                            </span>
                          </React.Fragment>
                        </h3>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </PlasmicLink__>
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__wmk5B
                  )}
                  component={Link}
                  href={"https://www.instagram.com/cocktails__king/"}
                  platform={"nextjs"}
                >
                  <InstagramLogoIcon
                    className={classNames(projectcss.all, sty.svg__lmMf2)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l8ELi
                    )}
                  >
                    {"@cocktails__king"}
                  </div>
                </Stack__>
              </Stack__>
            }
            footer={null}
            heading={null}
            isOpen={generateStateValueProp($state, ["menuModal", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["menuModal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button__sPcOp)}
              />
            }
          />

          <Modal
            data-plasmic-name={"formModal"}
            data-plasmic-override={overrides.formModal}
            className={classNames("__wab_instance", sty.formModal)}
            closeOnBackdropClick={true}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qNqSd)}
              >
                <Button
                  label={
                    <React.Fragment>
                      <CloseIconIcon
                        className={classNames(projectcss.all, sty.svg___2Gfn8)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qDzXj
                        )}
                      >
                        {"Let's work together"}
                      </div>
                    </React.Fragment>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateFormModalIsOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["formModal", "isOpen"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFormModalIsOpen"] != null &&
                      typeof $steps["updateFormModalIsOpen"] === "object" &&
                      typeof $steps["updateFormModalIsOpen"].then === "function"
                    ) {
                      $steps["updateFormModalIsOpen"] = await $steps[
                        "updateFormModalIsOpen"
                      ];
                    }
                  }}
                  type={"icon"}
                />

                <div
                  data-plasmic-name={"reachOutAndLetsTalk"}
                  data-plasmic-override={overrides.reachOutAndLetsTalk}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.reachOutAndLetsTalk
                  )}
                >
                  {"Reach out and let's talk"}
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.contactForm),
                    extendedOnValuesChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["contactForm", "value"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onFinish: async values => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (async () => {
                                  return (() => {
                                    event.preventDefault();
                                    console.log("\u2705 We're in the from!");
                                    const payload = {
                                      ...$state.contactForm.value
                                    };
                                    console.log(
                                      "\uD83D\uDCE4 Form payload:",
                                      payload
                                    );
                                    fetch("https://formspree.io/f/xzzrnery", {
                                      method: "POST",
                                      headers: {
                                        "Content-Type": "application/json",
                                        Accept: "application/json"
                                      },
                                      body: JSON.stringify(payload)
                                    })
                                      .then(async res => {
                                        if (res.ok) {
                                          console.log(
                                            "\u2705 Email sent via Formspree!"
                                          );
                                          $state.formModal.isOpen = false;
                                          $state.contactForm.value = {
                                            name: "",
                                            email: "",
                                            phone: "",
                                            message: ""
                                          };
                                        } else {
                                          const err = await res
                                            .json()
                                            .catch(() => ({}));
                                          console.error(
                                            "\u274C Formspree error:",
                                            err
                                          );
                                          window.alert(
                                            "Sorry, something went wrong. Please try again."
                                          );
                                        }
                                      })
                                      .catch(err => {
                                        console.error(
                                          "\u274C Network error:",
                                          err
                                        );
                                        window.alert(
                                          "Network error \u2013 check your connection and try again."
                                        );
                                      });
                                  })();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    },
                    onIsSubmittingChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["contactForm", "isSubmitting"],
                        FormWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    ref: ref => {
                      $refs["contactForm"] = ref;
                    },
                    requiredMark: false,
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "contactForm.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "contactForm.isSubmitting"
                      }
                    ],
                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <FormWrapper
                      data-plasmic-name={"contactForm"}
                      data-plasmic-override={overrides.contactForm}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"name"}
                        data-plasmic-override={overrides.name}
                        className={classNames("__wab_instance", sty.name)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jmsG9
                            )}
                          >
                            {"Name *"}
                          </div>
                        }
                        name={"name"}
                      >
                        <TextField
                          data-plasmic-name={"textField"}
                          data-plasmic-override={overrides.textField}
                          ariaLabel={"name"}
                          autoComplete={["name"]}
                          autoFocus={true}
                          className={classNames(
                            "__wab_instance",
                            sty.textField
                          )}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wuchQ
                              )}
                            >
                              {"Description..."}
                            </div>
                          }
                          inputMode={"text"}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3UwTd
                              )}
                            >
                              {"Label"}
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textField",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Enter your name"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "textField",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"email"}
                        data-plasmic-override={overrides.email}
                        className={classNames("__wab_instance", sty.email)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__u8LCk
                            )}
                          >
                            {"Email *"}
                          </div>
                        }
                        name={"email"}
                      >
                        <TextField
                          data-plasmic-name={"emailInput"}
                          data-plasmic-override={overrides.emailInput}
                          ariaLabel={"email"}
                          autoComplete={["email"]}
                          className={classNames(
                            "__wab_instance",
                            sty.emailInput
                          )}
                          inputMode={"email"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "emailInput",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Enter your email"}
                          showLabel={false}
                          type={"email"}
                          value={generateStateValueProp($state, [
                            "emailInput",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"phone"}
                        data-plasmic-override={overrides.phone}
                        className={classNames("__wab_instance", sty.phone)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lN9Dc
                            )}
                          >
                            {"Phone *"}
                          </div>
                        }
                        name={"phone"}
                      >
                        <TextField
                          data-plasmic-name={"phoneField"}
                          data-plasmic-override={overrides.phoneField}
                          ariaLabel={"phone"}
                          autoComplete={["tel"]}
                          className={classNames(
                            "__wab_instance",
                            sty.phoneField
                          )}
                          inputMode={"tel"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "phoneField",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Enter your phone number"}
                          showLabel={false}
                          type={"tel"}
                          value={generateStateValueProp($state, [
                            "phoneField",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"message"}
                        data-plasmic-override={overrides.message}
                        className={classNames("__wab_instance", sty.message)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ahdYh
                            )}
                          >
                            {"Message *"}
                          </div>
                        }
                        name={"message"}
                      >
                        <TextField
                          data-plasmic-name={"textField2"}
                          data-plasmic-override={overrides.textField2}
                          ariaLabel={"message-label"}
                          className={classNames(
                            "__wab_instance",
                            sty.textField2
                          )}
                          inputMode={"text"}
                          multiLine={true}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "textField2",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"Enter your message"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "textField2",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__ez9QO
                        )}
                        shape={"round"}
                        size={"large"}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          data-plasmic-name={"sendMessage"}
                          data-plasmic-override={overrides.sendMessage}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.sendMessage
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-PMhoKm26_7pT)" }}
                            >
                              {"Send Message"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdButton>
                    </FormWrapper>
                  );
                })()}
              </Stack__>
            }
            footer={null}
            heading={null}
            isOpen={generateStateValueProp($state, ["formModal", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["formModal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            showFooter={false}
            showHeader={false}
            trigger={
              <AntdButton
                className={classNames("__wab_instance", sty.button__zpDzR)}
              />
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navSection",
    "headerSection",
    "h1",
    "aboutMeSection",
    "portfolioSection",
    "h2",
    "libertineBlendsProject",
    "projectListItems",
    "libertineCocktailBarProject",
    "tiberiProject",
    "whiskeriaProject",
    "twoSchmukcs",
    "creativeColabsProject",
    "servicesSection",
    "service1",
    "rtdProductDevelopment",
    "service2",
    "rtdProductDevelopment2",
    "service3",
    "rtdProductDevelopment3",
    "service4",
    "rtdProductDevelopment4",
    "photosSection",
    "recognitionSection",
    "columns",
    "socialsSection",
    "instagramPosts",
    "post1",
    "post2",
    "post3",
    "post4",
    "sliderCarousel",
    "testimonialsSection",
    "_",
    "footer",
    "h6",
    "menuModal",
    "links",
    "formModal",
    "reachOutAndLetsTalk",
    "contactForm",
    "name",
    "textField",
    "email",
    "emailInput",
    "phone",
    "phoneField",
    "message",
    "textField2",
    "sendMessage"
  ],
  navSection: ["navSection"],
  headerSection: ["headerSection", "h1"],
  h1: ["h1"],
  aboutMeSection: ["aboutMeSection"],
  portfolioSection: [
    "portfolioSection",
    "h2",
    "libertineBlendsProject",
    "projectListItems",
    "libertineCocktailBarProject",
    "tiberiProject",
    "whiskeriaProject",
    "twoSchmukcs",
    "creativeColabsProject"
  ],
  h2: ["h2"],
  libertineBlendsProject: ["libertineBlendsProject", "projectListItems"],
  projectListItems: ["projectListItems"],
  libertineCocktailBarProject: ["libertineCocktailBarProject"],
  tiberiProject: ["tiberiProject"],
  whiskeriaProject: ["whiskeriaProject"],
  twoSchmukcs: ["twoSchmukcs"],
  creativeColabsProject: ["creativeColabsProject"],
  servicesSection: [
    "servicesSection",
    "service1",
    "rtdProductDevelopment",
    "service2",
    "rtdProductDevelopment2",
    "service3",
    "rtdProductDevelopment3",
    "service4",
    "rtdProductDevelopment4"
  ],
  service1: ["service1", "rtdProductDevelopment"],
  rtdProductDevelopment: ["rtdProductDevelopment"],
  service2: ["service2", "rtdProductDevelopment2"],
  rtdProductDevelopment2: ["rtdProductDevelopment2"],
  service3: ["service3", "rtdProductDevelopment3"],
  rtdProductDevelopment3: ["rtdProductDevelopment3"],
  service4: ["service4", "rtdProductDevelopment4"],
  rtdProductDevelopment4: ["rtdProductDevelopment4"],
  photosSection: ["photosSection"],
  recognitionSection: ["recognitionSection", "columns"],
  columns: ["columns"],
  socialsSection: [
    "socialsSection",
    "instagramPosts",
    "post1",
    "post2",
    "post3",
    "post4",
    "sliderCarousel"
  ],
  instagramPosts: ["instagramPosts", "post1", "post2", "post3", "post4"],
  post1: ["post1"],
  post2: ["post2"],
  post3: ["post3"],
  post4: ["post4"],
  sliderCarousel: ["sliderCarousel"],
  testimonialsSection: ["testimonialsSection", "_"],
  _: ["_"],
  footer: ["footer", "h6"],
  h6: ["h6"],
  menuModal: ["menuModal", "links"],
  links: ["links"],
  formModal: [
    "formModal",
    "reachOutAndLetsTalk",
    "contactForm",
    "name",
    "textField",
    "email",
    "emailInput",
    "phone",
    "phoneField",
    "message",
    "textField2",
    "sendMessage"
  ],
  reachOutAndLetsTalk: ["reachOutAndLetsTalk"],
  contactForm: [
    "contactForm",
    "name",
    "textField",
    "email",
    "emailInput",
    "phone",
    "phoneField",
    "message",
    "textField2",
    "sendMessage"
  ],
  name: ["name", "textField"],
  textField: ["textField"],
  email: ["email", "emailInput"],
  emailInput: ["emailInput"],
  phone: ["phone", "phoneField"],
  phoneField: ["phoneField"],
  message: ["message", "textField2"],
  textField2: ["textField2"],
  sendMessage: ["sendMessage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navSection: "section";
  headerSection: "section";
  h1: "h1";
  aboutMeSection: "section";
  portfolioSection: "section";
  h2: "h2";
  libertineBlendsProject: "div";
  projectListItems: "li";
  libertineCocktailBarProject: "div";
  tiberiProject: "div";
  whiskeriaProject: "div";
  twoSchmukcs: "div";
  creativeColabsProject: "div";
  servicesSection: "section";
  service1: "div";
  rtdProductDevelopment: "div";
  service2: "div";
  rtdProductDevelopment2: "div";
  service3: "div";
  rtdProductDevelopment3: "div";
  service4: "div";
  rtdProductDevelopment4: "div";
  photosSection: "section";
  recognitionSection: "section";
  columns: "div";
  socialsSection: "section";
  instagramPosts: "div";
  post1: "div";
  post2: "div";
  post3: "div";
  post4: "div";
  sliderCarousel: typeof SliderWrapper;
  testimonialsSection: "section";
  _: "div";
  footer: "section";
  h6: "h6";
  menuModal: typeof Modal;
  links: "div";
  formModal: typeof Modal;
  reachOutAndLetsTalk: "div";
  contactForm: typeof FormWrapper;
  name: typeof FormItemWrapper;
  textField: typeof TextField;
  email: typeof FormItemWrapper;
  emailInput: typeof TextField;
  phone: typeof FormItemWrapper;
  phoneField: typeof TextField;
  message: typeof FormItemWrapper;
  textField2: typeof TextField;
  sendMessage: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navSection: makeNodeComponent("navSection"),
    headerSection: makeNodeComponent("headerSection"),
    h1: makeNodeComponent("h1"),
    aboutMeSection: makeNodeComponent("aboutMeSection"),
    portfolioSection: makeNodeComponent("portfolioSection"),
    h2: makeNodeComponent("h2"),
    libertineBlendsProject: makeNodeComponent("libertineBlendsProject"),
    projectListItems: makeNodeComponent("projectListItems"),
    libertineCocktailBarProject: makeNodeComponent(
      "libertineCocktailBarProject"
    ),
    tiberiProject: makeNodeComponent("tiberiProject"),
    whiskeriaProject: makeNodeComponent("whiskeriaProject"),
    twoSchmukcs: makeNodeComponent("twoSchmukcs"),
    creativeColabsProject: makeNodeComponent("creativeColabsProject"),
    servicesSection: makeNodeComponent("servicesSection"),
    service1: makeNodeComponent("service1"),
    rtdProductDevelopment: makeNodeComponent("rtdProductDevelopment"),
    service2: makeNodeComponent("service2"),
    rtdProductDevelopment2: makeNodeComponent("rtdProductDevelopment2"),
    service3: makeNodeComponent("service3"),
    rtdProductDevelopment3: makeNodeComponent("rtdProductDevelopment3"),
    service4: makeNodeComponent("service4"),
    rtdProductDevelopment4: makeNodeComponent("rtdProductDevelopment4"),
    photosSection: makeNodeComponent("photosSection"),
    recognitionSection: makeNodeComponent("recognitionSection"),
    columns: makeNodeComponent("columns"),
    socialsSection: makeNodeComponent("socialsSection"),
    instagramPosts: makeNodeComponent("instagramPosts"),
    post1: makeNodeComponent("post1"),
    post2: makeNodeComponent("post2"),
    post3: makeNodeComponent("post3"),
    post4: makeNodeComponent("post4"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    testimonialsSection: makeNodeComponent("testimonialsSection"),
    _: makeNodeComponent("_"),
    footer: makeNodeComponent("footer"),
    h6: makeNodeComponent("h6"),
    menuModal: makeNodeComponent("menuModal"),
    links: makeNodeComponent("links"),
    formModal: makeNodeComponent("formModal"),
    reachOutAndLetsTalk: makeNodeComponent("reachOutAndLetsTalk"),
    contactForm: makeNodeComponent("contactForm"),
    _name: makeNodeComponent("name"),
    textField: makeNodeComponent("textField"),
    email: makeNodeComponent("email"),
    emailInput: makeNodeComponent("emailInput"),
    phone: makeNodeComponent("phone"),
    phoneField: makeNodeComponent("phoneField"),
    message: makeNodeComponent("message"),
    textField2: makeNodeComponent("textField2"),
    sendMessage: makeNodeComponent("sendMessage"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
